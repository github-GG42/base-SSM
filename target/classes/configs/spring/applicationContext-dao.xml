<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 读取jdbc.properties文件,druid.properties文件 -->
	<context:property-placeholder
		location="classpath:configs/spring/firstDB.properties,
		classpath:configs/spring/secondDB.properties,
		classpath:configs/spring/druid.properties
		" />

	<!-- 数据源一  - start -->
	<!-- 配置数据源 ，使用的alibba的数据库 -->
	<bean id="firstDataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName"
			value="${im.db.jdbc.driverClassName}" />
		<property name="url" value="${im.db.jdbc.url}" />
		<property name="username" value="${im.db.jdbc.username}" />
		<property name="password" value="${im.db.jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize"
			value="${druid.property.initialSize}" />
		<property name="minIdle" value="${druid.property.minIdle}" />
		<property name="maxActive"
			value="${druid.property.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.property.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${druid.property.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${druid.property.minEvictableIdleTimeMillis}" />

		<property name="validationQuery"
			value="${druid.property.validationQuery}" />
		<property name="testWhileIdle"
			value="${druid.property.testWhileIdle}" />
		<property name="testOnBorrow"
			value="${druid.property.testOnBorrow}" />
		<property name="testOnReturn"
			value="${druid.property.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements"
			value="${druid.property.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.property.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.property.filters}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="firstSqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="firstDataSource" />
		<!-- 配置MyBatis属性 -->
		<property name="configuration">
			<bean class="org.apache.ibatis.session.Configuration">
				<!-- <property name="logImpl" value="LOG4J"/> -->
			</bean>
		</property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/china/gis/baseSSM/mapper/firstmapper/*.xml"></property>
	</bean>


	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.china.gis.platform.mapper.intemanage" />
		<property name="sqlSessionFactoryBeanName"
			value="firstSqlSessionFactory"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="firstTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="firstDataSource" />
	</bean>
	
	 <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="firstTransactionManager"  />
	<!-- 数据源一 end -->




	<!-- 数据源二 - start -->
	<!-- 配置数据源 ，使用的alibba的数据库 -->
	<bean id="secondDataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName"
			value="${cp.db.jdbc.driverClassName}" />
		<property name="url" value="${cp.db.jdbc.url}" />
		<property name="username" value="${cp.db.jdbc.username}" />
		<property name="password" value="${cp.db.jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize"
			value="${druid.property.initialSize}" />
		<property name="minIdle" value="${druid.property.minIdle}" />
		<property name="maxActive"
			value="${druid.property.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.property.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${druid.property.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${druid.property.minEvictableIdleTimeMillis}" />

		<property name="validationQuery"
			value="${druid.property.validationQuery}" />
		<property name="testWhileIdle"
			value="${druid.property.testWhileIdle}" />
		<property name="testOnBorrow"
			value="${druid.property.testOnBorrow}" />
		<property name="testOnReturn"
			value="${druid.property.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements"
			value="${druid.property.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.property.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.property.filters}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="secondSqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="secondDataSource" />
		<!-- 配置MyBatis属性 -->
		<property name="configuration">
			<bean class="org.apache.ibatis.session.Configuration">
				<!-- <property name="logImpl" value="LOG4J"/> -->
			</bean>
		</property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/china/gis/baseSSM/mapper/secondmapper/*.xml"></property>
	</bean>


	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.china.gis.platform.mapper.cityplatform" />
		<property name="sqlSessionFactoryBeanName"
			value="secondSqlSessionFactory"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="secondTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="secondDataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven
		transaction-manager="secondTransactionManager" />
	<!-- 数据源二  end -->
</beans>